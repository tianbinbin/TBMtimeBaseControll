//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle.Base

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `mtime_loading.gif`.
    static let mtime_loadingGif = Rswift.FileResource(bundle: R.hostingBundle, name: "mtime_loading", pathExtension: "gif")

    /// `bundle.url(forResource: "mtime_loading", withExtension: "gif")`
    static func mtime_loadingGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mtime_loadingGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 39 images.
  struct image {
    /// Image `core_bg_binding_scan_input`.
    static let core_bg_binding_scan_input = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_bg_binding_scan_input")
    /// Image `core_btn_add`.
    static let core_btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_btn_add")
    /// Image `core_btn_reduce`.
    static let core_btn_reduce = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_btn_reduce")
    /// Image `core_common_qr_scan_line`.
    static let core_common_qr_scan_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_common_qr_scan_line")
    /// Image `core_download`.
    static let core_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_download")
    /// Image `core_empty_data_mtime`.
    static let core_empty_data_mtime = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_empty_data_mtime")
    /// Image `core_empty_data_wandafilm`.
    static let core_empty_data_wandafilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_empty_data_wandafilm")
    /// Image `core_fullscreen`.
    static let core_fullscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_fullscreen")
    /// Image `core_ic_cameraD`.
    static let core_ic_cameraD = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_ic_cameraD")
    /// Image `core_ic_checkMA`.
    static let core_ic_checkMA = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_ic_checkMA")
    /// Image `core_loading_circle`.
    static let core_loading_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_loading_circle")
    /// Image `core_loading_fail_mtime`.
    static let core_loading_fail_mtime = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_loading_fail_mtime")
    /// Image `core_loading_fail_wandafilm`.
    static let core_loading_fail_wandafilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_loading_fail_wandafilm")
    /// Image `core_nav_back`.
    static let core_nav_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_nav_back")
    /// Image `core_nav_close`.
    static let core_nav_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_nav_close")
    /// Image `core_network_error_wandafilm`.
    static let core_network_error_wandafilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_network_error_wandafilm")
    /// Image `core_play_big`.
    static let core_play_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_play_big")
    /// Image `core_progress_hud`.
    static let core_progress_hud = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_progress_hud")
    /// Image `core_pull_arrow`.
    static let core_pull_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_pull_arrow")
    /// Image `core_pull_hud_mtime`.
    static let core_pull_hud_mtime = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_pull_hud_mtime")
    /// Image `core_pull_hud_wandafilm`.
    static let core_pull_hud_wandafilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_pull_hud_wandafilm")
    /// Image `core_share_friends`.
    static let core_share_friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_share_friends")
    /// Image `core_share_icon_white`.
    static let core_share_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_share_icon_white")
    /// Image `core_share_moment`.
    static let core_share_moment = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_share_moment")
    /// Image `core_share_qq`.
    static let core_share_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_share_qq")
    /// Image `core_share_weibo`.
    static let core_share_weibo = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_share_weibo")
    /// Image `core_share`.
    static let core_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_share")
    /// Image `core_video_brightness`.
    static let core_video_brightness = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_brightness")
    /// Image `core_video_fast_backward`.
    static let core_video_fast_backward = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_fast_backward")
    /// Image `core_video_fast_forward`.
    static let core_video_fast_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_fast_forward")
    /// Image `core_video_landscape`.
    static let core_video_landscape = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_landscape")
    /// Image `core_video_next`.
    static let core_video_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_next")
    /// Image `core_video_pause`.
    static let core_video_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_pause")
    /// Image `core_video_play`.
    static let core_video_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_play")
    /// Image `core_video_portrait`.
    static let core_video_portrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_portrait")
    /// Image `core_video_slider`.
    static let core_video_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_slider")
    /// Image `core_video_volume`.
    static let core_video_volume = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_volume")
    /// Image `core_video_white_backg_play`.
    static let core_video_white_backg_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "core_video_white_backg_play")
    /// Image `mtime_loading.gif`.
    static let mtime_loadingGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "mtime_loading.gif")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_bg_binding_scan_input", bundle: ..., traitCollection: ...)`
    static func core_bg_binding_scan_input(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_bg_binding_scan_input, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_btn_add", bundle: ..., traitCollection: ...)`
    static func core_btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_btn_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_btn_reduce", bundle: ..., traitCollection: ...)`
    static func core_btn_reduce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_btn_reduce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_common_qr_scan_line", bundle: ..., traitCollection: ...)`
    static func core_common_qr_scan_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_common_qr_scan_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_download", bundle: ..., traitCollection: ...)`
    static func core_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_empty_data_mtime", bundle: ..., traitCollection: ...)`
    static func core_empty_data_mtime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_empty_data_mtime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_empty_data_wandafilm", bundle: ..., traitCollection: ...)`
    static func core_empty_data_wandafilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_empty_data_wandafilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_fullscreen", bundle: ..., traitCollection: ...)`
    static func core_fullscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_fullscreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_ic_cameraD", bundle: ..., traitCollection: ...)`
    static func core_ic_cameraD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_ic_cameraD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_ic_checkMA", bundle: ..., traitCollection: ...)`
    static func core_ic_checkMA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_ic_checkMA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_loading_circle", bundle: ..., traitCollection: ...)`
    static func core_loading_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_loading_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_loading_fail_mtime", bundle: ..., traitCollection: ...)`
    static func core_loading_fail_mtime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_loading_fail_mtime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_loading_fail_wandafilm", bundle: ..., traitCollection: ...)`
    static func core_loading_fail_wandafilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_loading_fail_wandafilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_nav_back", bundle: ..., traitCollection: ...)`
    static func core_nav_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_nav_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_nav_close", bundle: ..., traitCollection: ...)`
    static func core_nav_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_nav_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_network_error_wandafilm", bundle: ..., traitCollection: ...)`
    static func core_network_error_wandafilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_network_error_wandafilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_play_big", bundle: ..., traitCollection: ...)`
    static func core_play_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_play_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_progress_hud", bundle: ..., traitCollection: ...)`
    static func core_progress_hud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_progress_hud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_pull_arrow", bundle: ..., traitCollection: ...)`
    static func core_pull_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_pull_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_pull_hud_mtime", bundle: ..., traitCollection: ...)`
    static func core_pull_hud_mtime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_pull_hud_mtime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_pull_hud_wandafilm", bundle: ..., traitCollection: ...)`
    static func core_pull_hud_wandafilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_pull_hud_wandafilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_share", bundle: ..., traitCollection: ...)`
    static func core_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_share_friends", bundle: ..., traitCollection: ...)`
    static func core_share_friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_share_friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_share_icon_white", bundle: ..., traitCollection: ...)`
    static func core_share_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_share_icon_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_share_moment", bundle: ..., traitCollection: ...)`
    static func core_share_moment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_share_moment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_share_qq", bundle: ..., traitCollection: ...)`
    static func core_share_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_share_qq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_share_weibo", bundle: ..., traitCollection: ...)`
    static func core_share_weibo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_share_weibo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_brightness", bundle: ..., traitCollection: ...)`
    static func core_video_brightness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_brightness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_fast_backward", bundle: ..., traitCollection: ...)`
    static func core_video_fast_backward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_fast_backward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_fast_forward", bundle: ..., traitCollection: ...)`
    static func core_video_fast_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_fast_forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_landscape", bundle: ..., traitCollection: ...)`
    static func core_video_landscape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_landscape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_next", bundle: ..., traitCollection: ...)`
    static func core_video_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_pause", bundle: ..., traitCollection: ...)`
    static func core_video_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_play", bundle: ..., traitCollection: ...)`
    static func core_video_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_portrait", bundle: ..., traitCollection: ...)`
    static func core_video_portrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_portrait, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_slider", bundle: ..., traitCollection: ...)`
    static func core_video_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_slider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_volume", bundle: ..., traitCollection: ...)`
    static func core_video_volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "core_video_white_backg_play", bundle: ..., traitCollection: ...)`
    static func core_video_white_backg_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.core_video_white_backg_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mtime_loading.gif", bundle: ..., traitCollection: ...)`
    static func mtime_loadingGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mtime_loadingGif, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `ImagePreviewViewController`.
    static let imagePreviewViewController = _R.nib._ImagePreviewViewController()
    /// Nib `ScanQrcodeController`.
    static let scanQrcodeController = _R.nib._ScanQrcodeController()
    /// Nib `VideoPlayerBottomControlView`.
    static let videoPlayerBottomControlView = _R.nib._VideoPlayerBottomControlView()
    /// Nib `VideoPlayerContentView`.
    static let videoPlayerContentView = _R.nib._VideoPlayerContentView()
    /// Nib `VideoPlayerDataUseTipView`.
    static let videoPlayerDataUseTipView = _R.nib._VideoPlayerDataUseTipView()
    /// Nib `VideoPlayerSmallProgressView`.
    static let videoPlayerSmallProgressView = _R.nib._VideoPlayerSmallProgressView()
    /// Nib `VideoPlayerTopControlView`.
    static let videoPlayerTopControlView = _R.nib._VideoPlayerTopControlView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImagePreviewViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imagePreviewViewController) instead")
    static func imagePreviewViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imagePreviewViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScanQrcodeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scanQrcodeController) instead")
    static func scanQrcodeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scanQrcodeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerBottomControlView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerBottomControlView) instead")
    static func videoPlayerBottomControlView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerBottomControlView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerContentView) instead")
    static func videoPlayerContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerContentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerDataUseTipView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerDataUseTipView) instead")
    static func videoPlayerDataUseTipView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerDataUseTipView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerSmallProgressView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerSmallProgressView) instead")
    static func videoPlayerSmallProgressView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerSmallProgressView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerTopControlView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerTopControlView) instead")
    static func videoPlayerTopControlView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerTopControlView)
    }
    #endif

    static func imagePreviewViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imagePreviewViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scanQrcodeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scanQrcodeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoPlayerBottomControlView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerBottomControlView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoPlayerContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoPlayerDataUseTipView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerDataUseTipView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoPlayerSmallProgressView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerSmallProgressView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoPlayerTopControlView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerTopControlView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ImagePreviewViewController.validate()
      try _ScanQrcodeController.validate()
      try _VideoPlayerBottomControlView.validate()
      try _VideoPlayerDataUseTipView.validate()
      try _VideoPlayerTopControlView.validate()
    }

    struct _ImagePreviewViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImagePreviewViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "core_download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_download' is used in nib 'ImagePreviewViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "core_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_share' is used in nib 'ImagePreviewViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ScanQrcodeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScanQrcodeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "core_bg_binding_scan_input", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_bg_binding_scan_input' is used in nib 'ScanQrcodeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "coupon_common_qr_scan_inner_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'coupon_common_qr_scan_inner_view' is used in nib 'ScanQrcodeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoPlayerBottomControlView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoPlayerBottomControlView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "core_video_landscape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_video_landscape' is used in nib 'VideoPlayerBottomControlView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "core_video_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_video_next' is used in nib 'VideoPlayerBottomControlView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "core_video_pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_video_pause' is used in nib 'VideoPlayerBottomControlView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "core_video_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_video_play' is used in nib 'VideoPlayerBottomControlView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "core_video_portrait", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_video_portrait' is used in nib 'VideoPlayerBottomControlView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoPlayerContentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoPlayerContentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VideoPlayerDataUseTipView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoPlayerDataUseTipView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "core_video_white_backg_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_video_white_backg_play' is used in nib 'VideoPlayerDataUseTipView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VideoPlayerSmallProgressView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoPlayerSmallProgressView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VideoPlayerTopControlView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoPlayerTopControlView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "core_nav_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_nav_back' is used in nib 'VideoPlayerTopControlView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "core_share_icon_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'core_share_icon_white' is used in nib 'VideoPlayerTopControlView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"
      let testViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "TestViewController")

      func testViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().testViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testViewController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
